Node bookapi backend app with cors middleware


Component Lifecycle Hooks https://angular.io/tutorial/toh-pt1 
Frequently used Modules: https://angular.io/guide/frequent-ngmodules




1) Ng new ngbookapi


cd ngbookapi


2) 
npm install popper  --save
npm install jquery  --save
npm install bootstrap  --save
Configure angular.json file, both app and test sections styles or only default module app.


"styles": [
   "src/styles.css",
   "./node_modules/bootstrap/dist/css/bootstrap.min.css"
 ],
 "scripts": ["./node_modules/jquery/dist/jquery.min.js"]
 ng serve -o
 
 3) Create components
ng g c book-add --skip-tests 
ng g c book-get --skip-tests 
ng g c book-edit --skip-tests 


 
 4) In app.routing.module.ts
 
import { BookAddComponent } from './book-add/book-add.component';
import { BookEditComponent } from './book-edit/book-edit.component';
import { BookGetComponent } from './book-get/book-get.component';
 
const routes: Routes = [
  {
    path: 'book/create',
    component: BookAddComponent
  },
  {
    path: 'book/edit/:id',
    component: BookEditComponent
  },
  {
    path: 'book',
    component: BookGetComponent
  }
];


5) Create Angular Navigation in app.component.html fileâ€™s <router-outlet> directive will display 


<h1 align="center">Welcome to Angular!!</h1>


<table border="1" width="90%" align="center">
  <tr><td align="center"><h1>Header</h1></td></tr>
  <tr><td>
        <table border="1" width="100%">
      <tr>
        <td>
            <ul>
                <li>
                  <a routerLink="book/create" routerLinkActive="active">
                    Insert Book
                  </a>
                </li>
                <li>
                  <a routerLink="book" routerLinkActive="active">
                    Books
                  </a>
                </li> 
              </ul>
              
        </td>
        <td width="70%">
          
            <router-outlet></router-outlet>
        </td>
        <td> </td>
      </tr>
    </table>
  </td></tr>
  <tr><td align="center"><h3>Footer</h3></td></tr>
</table>


6) Add Bootstrap Form


 use ReactiveFormsModule


import the ReactiveFormsModule inside the app.module.ts file.


// app.module.ts


import { ReactiveFormsModule } from '@angular/forms';


imports: [
    ...
    ReactiveFormsModule
],


-------------------------------






// book-add.component.ts
import { FormGroup,  FormBuilder,  Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
---
  angForm: FormGroup;
  constructor(private route: ActivatedRoute,
    private router: Router,
    private fb: FormBuilder
    ) {
    this.angForm = this.fb.group({
      name: ['', Validators.required ],
      price: ['', Validators.required ],
      quantity: ['', Validators.required ]
    });
  }
  
  addBook(name :string, price :number,quantity :number)
  {
    alert(name +" "+price+" "+quantity);
  }






// book-add.component.html


<div  class="card">
    <div class="card-body">
      <form [formGroup]="angForm" novalidate>
  
        <div class="form-group">
          <label class="col-md-4">Book Name</label>
          <input type="text"  formControlName="name" class="form-control" />
        </div>
        <div *ngIf="angForm.controls['name'].errors && angForm.controls['name'].invalid && (angForm.controls['name'].dirty || angForm.controls['name'].touched)" class="alert alert-danger">
          <div *ngIf="angForm.controls['name'].errors.required">
            Book Name is required.
          </div>
        </div>
        
        <div class="form-group">
          <label class="col-md-4">Price </label>
          <input type="text"  formControlName="price" class="form-control" />
        </div>
        <div *ngIf="angForm.controls['price'].errors && angForm.controls['price'].invalid && (angForm.controls['price'].dirty || angForm.controls['price'].touched)" class="alert alert-danger">
          <div *ngIf="angForm.controls['price'].errors.required">
            Price is required.
          </div>
        </div>
        
        <div class="form-group">
          <label class="col-md-4">Quantity </label>
          <input type="text"  formControlName="quantity" class="form-control" />
        </div>
        <div *ngIf="angForm.controls['quantity'].errors && angForm.controls['quantity'].invalid && (angForm.controls['quantity'].dirty || angForm.controls['quantity'].touched)" class="alert alert-danger">
          <div *ngIf="angForm.controls['quantity'].errors.required">
            Quantity is required.
          </div>
        </div>
  
        <div class="form-group">
          <button  type="button" (click)="addBook(angForm.controls['name'].value, angForm.controls['price'].value, angForm.controls['quantity'].value)"
              [disabled]="angForm.pristine || angForm.invalid" 
              class="btn btn-primary">
              Add Book
           </button>
        </div>
      </form>
    </div>
  </div>
  
9) Configure the HttpClientModule


Import the HttpClientModule inside the app.module.ts file.


// app.module.ts
import { HttpClientModule } from '@angular/common/http';


imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule,
    HttpClientModule
  ],
  
10) Create a Book class (model).


ng g class book --skip-tests 
 // Book.ts
 
export default class Book {
    _id: String="";
    name: String="";
    price: Number=0;
    quantity: Number=0;
}


11) Create an Angular Service file.


ng g service book --skip-tests


Now, import the book.service.ts file into the app.module.ts file.


// app.module.ts
import { BookService } from './book.service';


providers: [ BookService ]


12) book.service.ts -------------


import { HttpClient } from '@angular/common/http';
import Book from "./book";
import { Observable } from 'rxjs';
---
  uri = 'http://localhost:8000/books&#39;;


  constructor(private http: HttpClient) { }


  addBook(name :string, price :number, quantity :number) {
    const obj = {
      name: name,
      price: price,
      quantity: quantity
    };
    console.log(obj);
    this.http.post(`${this.uri}`, obj).subscribe(res => console.log('Done'));
  }


  getBooks() :Observable<Book[]> {    
    return this.http.get<Book[]>(`${this.uri}`);
  }


  editBook(id :any) {
    return this
            .http
            .get(`${this.uri}/${id}`);
    }


    updateBook(id :any,name :string, price :number, quantity :number) {


      const obj = {
          
          name: name,
          price: price,
          quantity: quantity
        };
      this
        .http
        .put(`${this.uri}/${id}`, obj)
        .subscribe(res => console.log('Done'));
    }


    deleteBook(id :any) {
      return this
                .http
                .delete(`${this.uri}/${id}`);
    }




Next) book-add.component.ts ------------


import { BookService } from '../book.service';


constructor(private route: ActivatedRoute,
    .
.
private bs: BookService
) 
{
    
  }
  
    addBook(name, price, quantity) {
    this.bs.addBook(name, price, quantity);
    this.router.navigate(['book']);
  }


13)  Show books & Delete
 //  book-get.coponent.ts
 
import { Component, OnInit } from '@angular/core';
import Book from '../book';
import { BookService } from '../book.service';


@Component({
  selector: 'app-book-get',
  templateUrl: './book-get.component.html',
  styleUrls: ['./book-get.component.css']
})
export class BookGetComponent implements OnInit {
  books: Book[]=[];
  constructor(private bs: BookService) { }


  ngOnInit() {
    this.bs
      .getBooks()
      .subscribe((data: Book[]) => {
        this.books = data;
    });
  }




//book-get.component.html
<table class="table table-hover">
  <thead>
  <tr>
      <td>Book Name</td>
      <td>Price</td>
      <td>Quantity</td>
      <td colspan="2">Actions</td>
  </tr>
  </thead>


  <tbody>
      <tr *ngFor="let book of books">
          <td>{{ book.name }}</td>
          <td>{{ book.price }}</td>
          <td>{{ book.quantity }}</td>
          <td><a [routerLink]="['/book/edit', book._id]" class="btn btn-primary">Edit</a></td>
      </tr>

  </tbody>
</table>
